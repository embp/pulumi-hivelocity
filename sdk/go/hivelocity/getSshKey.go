// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hivelocity

import (
	"context"
	"reflect"

	"github.com/embp/pulumi-hivelocity/sdk/go/hivelocity/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSshKey(ctx *pulumi.Context, args *LookupSshKeyArgs, opts ...pulumi.InvokeOption) (*LookupSshKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSshKeyResult
	err := ctx.Invoke("hivelocity:index/getSshKey:getSshKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSshKey.
type LookupSshKeyArgs struct {
	Filters []GetSshKeyFilter `pulumi:"filters"`
	First   *bool             `pulumi:"first"`
}

// A collection of values returned by getSshKey.
type LookupSshKeyResult struct {
	Filters []GetSshKeyFilter `pulumi:"filters"`
	First   *bool             `pulumi:"first"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	Name      string `pulumi:"name"`
	PublicKey string `pulumi:"publicKey"`
	SshKeyId  int    `pulumi:"sshKeyId"`
}

func LookupSshKeyOutput(ctx *pulumi.Context, args LookupSshKeyOutputArgs, opts ...pulumi.InvokeOption) LookupSshKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSshKeyResult, error) {
			args := v.(LookupSshKeyArgs)
			r, err := LookupSshKey(ctx, &args, opts...)
			var s LookupSshKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSshKeyResultOutput)
}

// A collection of arguments for invoking getSshKey.
type LookupSshKeyOutputArgs struct {
	Filters GetSshKeyFilterArrayInput `pulumi:"filters"`
	First   pulumi.BoolPtrInput       `pulumi:"first"`
}

func (LookupSshKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSshKeyArgs)(nil)).Elem()
}

// A collection of values returned by getSshKey.
type LookupSshKeyResultOutput struct{ *pulumi.OutputState }

func (LookupSshKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSshKeyResult)(nil)).Elem()
}

func (o LookupSshKeyResultOutput) ToLookupSshKeyResultOutput() LookupSshKeyResultOutput {
	return o
}

func (o LookupSshKeyResultOutput) ToLookupSshKeyResultOutputWithContext(ctx context.Context) LookupSshKeyResultOutput {
	return o
}

func (o LookupSshKeyResultOutput) Filters() GetSshKeyFilterArrayOutput {
	return o.ApplyT(func(v LookupSshKeyResult) []GetSshKeyFilter { return v.Filters }).(GetSshKeyFilterArrayOutput)
}

func (o LookupSshKeyResultOutput) First() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupSshKeyResult) *bool { return v.First }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSshKeyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSshKeyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSshKeyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSshKeyResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSshKeyResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSshKeyResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

func (o LookupSshKeyResultOutput) SshKeyId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSshKeyResult) int { return v.SshKeyId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSshKeyResultOutput{})
}
