// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hivelocity

import (
	"context"
	"reflect"

	"errors"
	"github.com/embp/pulumi-hivelocity/sdk/go/hivelocity/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IgnitionDetail struct {
	pulumi.CustomResourceState

	// String of the JSON contents of the ignition file
	Contents pulumi.StringOutput `pulumi:"contents"`
	// Name of ignition file resource
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIgnitionDetail registers a new resource with the given unique name, arguments, and options.
func NewIgnitionDetail(ctx *pulumi.Context,
	name string, args *IgnitionDetailArgs, opts ...pulumi.ResourceOption) (*IgnitionDetail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contents == nil {
		return nil, errors.New("invalid value for required argument 'Contents'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("hivelocity:index/ignition:ignition"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IgnitionDetail
	err := ctx.RegisterResource("hivelocity:index/ignitionDetail:IgnitionDetail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIgnitionDetail gets an existing IgnitionDetail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIgnitionDetail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IgnitionDetailState, opts ...pulumi.ResourceOption) (*IgnitionDetail, error) {
	var resource IgnitionDetail
	err := ctx.ReadResource("hivelocity:index/ignitionDetail:IgnitionDetail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IgnitionDetail resources.
type ignitionDetailState struct {
	// String of the JSON contents of the ignition file
	Contents *string `pulumi:"contents"`
	// Name of ignition file resource
	Name *string `pulumi:"name"`
}

type IgnitionDetailState struct {
	// String of the JSON contents of the ignition file
	Contents pulumi.StringPtrInput
	// Name of ignition file resource
	Name pulumi.StringPtrInput
}

func (IgnitionDetailState) ElementType() reflect.Type {
	return reflect.TypeOf((*ignitionDetailState)(nil)).Elem()
}

type ignitionDetailArgs struct {
	// String of the JSON contents of the ignition file
	Contents string `pulumi:"contents"`
	// Name of ignition file resource
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IgnitionDetail resource.
type IgnitionDetailArgs struct {
	// String of the JSON contents of the ignition file
	Contents pulumi.StringInput
	// Name of ignition file resource
	Name pulumi.StringPtrInput
}

func (IgnitionDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ignitionDetailArgs)(nil)).Elem()
}

type IgnitionDetailInput interface {
	pulumi.Input

	ToIgnitionDetailOutput() IgnitionDetailOutput
	ToIgnitionDetailOutputWithContext(ctx context.Context) IgnitionDetailOutput
}

func (*IgnitionDetail) ElementType() reflect.Type {
	return reflect.TypeOf((**IgnitionDetail)(nil)).Elem()
}

func (i *IgnitionDetail) ToIgnitionDetailOutput() IgnitionDetailOutput {
	return i.ToIgnitionDetailOutputWithContext(context.Background())
}

func (i *IgnitionDetail) ToIgnitionDetailOutputWithContext(ctx context.Context) IgnitionDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IgnitionDetailOutput)
}

// IgnitionDetailArrayInput is an input type that accepts IgnitionDetailArray and IgnitionDetailArrayOutput values.
// You can construct a concrete instance of `IgnitionDetailArrayInput` via:
//
//	IgnitionDetailArray{ IgnitionDetailArgs{...} }
type IgnitionDetailArrayInput interface {
	pulumi.Input

	ToIgnitionDetailArrayOutput() IgnitionDetailArrayOutput
	ToIgnitionDetailArrayOutputWithContext(context.Context) IgnitionDetailArrayOutput
}

type IgnitionDetailArray []IgnitionDetailInput

func (IgnitionDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IgnitionDetail)(nil)).Elem()
}

func (i IgnitionDetailArray) ToIgnitionDetailArrayOutput() IgnitionDetailArrayOutput {
	return i.ToIgnitionDetailArrayOutputWithContext(context.Background())
}

func (i IgnitionDetailArray) ToIgnitionDetailArrayOutputWithContext(ctx context.Context) IgnitionDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IgnitionDetailArrayOutput)
}

// IgnitionDetailMapInput is an input type that accepts IgnitionDetailMap and IgnitionDetailMapOutput values.
// You can construct a concrete instance of `IgnitionDetailMapInput` via:
//
//	IgnitionDetailMap{ "key": IgnitionDetailArgs{...} }
type IgnitionDetailMapInput interface {
	pulumi.Input

	ToIgnitionDetailMapOutput() IgnitionDetailMapOutput
	ToIgnitionDetailMapOutputWithContext(context.Context) IgnitionDetailMapOutput
}

type IgnitionDetailMap map[string]IgnitionDetailInput

func (IgnitionDetailMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IgnitionDetail)(nil)).Elem()
}

func (i IgnitionDetailMap) ToIgnitionDetailMapOutput() IgnitionDetailMapOutput {
	return i.ToIgnitionDetailMapOutputWithContext(context.Background())
}

func (i IgnitionDetailMap) ToIgnitionDetailMapOutputWithContext(ctx context.Context) IgnitionDetailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IgnitionDetailMapOutput)
}

type IgnitionDetailOutput struct{ *pulumi.OutputState }

func (IgnitionDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IgnitionDetail)(nil)).Elem()
}

func (o IgnitionDetailOutput) ToIgnitionDetailOutput() IgnitionDetailOutput {
	return o
}

func (o IgnitionDetailOutput) ToIgnitionDetailOutputWithContext(ctx context.Context) IgnitionDetailOutput {
	return o
}

// String of the JSON contents of the ignition file
func (o IgnitionDetailOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v *IgnitionDetail) pulumi.StringOutput { return v.Contents }).(pulumi.StringOutput)
}

// Name of ignition file resource
func (o IgnitionDetailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IgnitionDetail) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IgnitionDetailArrayOutput struct{ *pulumi.OutputState }

func (IgnitionDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IgnitionDetail)(nil)).Elem()
}

func (o IgnitionDetailArrayOutput) ToIgnitionDetailArrayOutput() IgnitionDetailArrayOutput {
	return o
}

func (o IgnitionDetailArrayOutput) ToIgnitionDetailArrayOutputWithContext(ctx context.Context) IgnitionDetailArrayOutput {
	return o
}

func (o IgnitionDetailArrayOutput) Index(i pulumi.IntInput) IgnitionDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IgnitionDetail {
		return vs[0].([]*IgnitionDetail)[vs[1].(int)]
	}).(IgnitionDetailOutput)
}

type IgnitionDetailMapOutput struct{ *pulumi.OutputState }

func (IgnitionDetailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IgnitionDetail)(nil)).Elem()
}

func (o IgnitionDetailMapOutput) ToIgnitionDetailMapOutput() IgnitionDetailMapOutput {
	return o
}

func (o IgnitionDetailMapOutput) ToIgnitionDetailMapOutputWithContext(ctx context.Context) IgnitionDetailMapOutput {
	return o
}

func (o IgnitionDetailMapOutput) MapIndex(k pulumi.StringInput) IgnitionDetailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IgnitionDetail {
		return vs[0].(map[string]*IgnitionDetail)[vs[1].(string)]
	}).(IgnitionDetailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IgnitionDetailInput)(nil)).Elem(), &IgnitionDetail{})
	pulumi.RegisterInputType(reflect.TypeOf((*IgnitionDetailArrayInput)(nil)).Elem(), IgnitionDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IgnitionDetailMapInput)(nil)).Elem(), IgnitionDetailMap{})
	pulumi.RegisterOutputType(IgnitionDetailOutput{})
	pulumi.RegisterOutputType(IgnitionDetailArrayOutput{})
	pulumi.RegisterOutputType(IgnitionDetailMapOutput{})
}
