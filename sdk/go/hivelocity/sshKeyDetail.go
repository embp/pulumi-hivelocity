// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hivelocity

import (
	"context"
	"reflect"

	"errors"
	"github.com/embp/pulumi-hivelocity/sdk/go/hivelocity/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SshKeyDetail struct {
	pulumi.CustomResourceState

	Name      pulumi.StringOutput `pulumi:"name"`
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	SshKeyId  pulumi.IntOutput    `pulumi:"sshKeyId"`
}

// NewSshKeyDetail registers a new resource with the given unique name, arguments, and options.
func NewSshKeyDetail(ctx *pulumi.Context,
	name string, args *SshKeyDetailArgs, opts ...pulumi.ResourceOption) (*SshKeyDetail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("hivelocity:index/sshKey:sshKey"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SshKeyDetail
	err := ctx.RegisterResource("hivelocity:index/sshKeyDetail:SshKeyDetail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSshKeyDetail gets an existing SshKeyDetail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSshKeyDetail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SshKeyDetailState, opts ...pulumi.ResourceOption) (*SshKeyDetail, error) {
	var resource SshKeyDetail
	err := ctx.ReadResource("hivelocity:index/sshKeyDetail:SshKeyDetail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SshKeyDetail resources.
type sshKeyDetailState struct {
	Name      *string `pulumi:"name"`
	PublicKey *string `pulumi:"publicKey"`
	SshKeyId  *int    `pulumi:"sshKeyId"`
}

type SshKeyDetailState struct {
	Name      pulumi.StringPtrInput
	PublicKey pulumi.StringPtrInput
	SshKeyId  pulumi.IntPtrInput
}

func (SshKeyDetailState) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyDetailState)(nil)).Elem()
}

type sshKeyDetailArgs struct {
	Name      *string `pulumi:"name"`
	PublicKey string  `pulumi:"publicKey"`
	SshKeyId  *int    `pulumi:"sshKeyId"`
}

// The set of arguments for constructing a SshKeyDetail resource.
type SshKeyDetailArgs struct {
	Name      pulumi.StringPtrInput
	PublicKey pulumi.StringInput
	SshKeyId  pulumi.IntPtrInput
}

func (SshKeyDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sshKeyDetailArgs)(nil)).Elem()
}

type SshKeyDetailInput interface {
	pulumi.Input

	ToSshKeyDetailOutput() SshKeyDetailOutput
	ToSshKeyDetailOutputWithContext(ctx context.Context) SshKeyDetailOutput
}

func (*SshKeyDetail) ElementType() reflect.Type {
	return reflect.TypeOf((**SshKeyDetail)(nil)).Elem()
}

func (i *SshKeyDetail) ToSshKeyDetailOutput() SshKeyDetailOutput {
	return i.ToSshKeyDetailOutputWithContext(context.Background())
}

func (i *SshKeyDetail) ToSshKeyDetailOutputWithContext(ctx context.Context) SshKeyDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshKeyDetailOutput)
}

// SshKeyDetailArrayInput is an input type that accepts SshKeyDetailArray and SshKeyDetailArrayOutput values.
// You can construct a concrete instance of `SshKeyDetailArrayInput` via:
//
//	SshKeyDetailArray{ SshKeyDetailArgs{...} }
type SshKeyDetailArrayInput interface {
	pulumi.Input

	ToSshKeyDetailArrayOutput() SshKeyDetailArrayOutput
	ToSshKeyDetailArrayOutputWithContext(context.Context) SshKeyDetailArrayOutput
}

type SshKeyDetailArray []SshKeyDetailInput

func (SshKeyDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshKeyDetail)(nil)).Elem()
}

func (i SshKeyDetailArray) ToSshKeyDetailArrayOutput() SshKeyDetailArrayOutput {
	return i.ToSshKeyDetailArrayOutputWithContext(context.Background())
}

func (i SshKeyDetailArray) ToSshKeyDetailArrayOutputWithContext(ctx context.Context) SshKeyDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshKeyDetailArrayOutput)
}

// SshKeyDetailMapInput is an input type that accepts SshKeyDetailMap and SshKeyDetailMapOutput values.
// You can construct a concrete instance of `SshKeyDetailMapInput` via:
//
//	SshKeyDetailMap{ "key": SshKeyDetailArgs{...} }
type SshKeyDetailMapInput interface {
	pulumi.Input

	ToSshKeyDetailMapOutput() SshKeyDetailMapOutput
	ToSshKeyDetailMapOutputWithContext(context.Context) SshKeyDetailMapOutput
}

type SshKeyDetailMap map[string]SshKeyDetailInput

func (SshKeyDetailMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshKeyDetail)(nil)).Elem()
}

func (i SshKeyDetailMap) ToSshKeyDetailMapOutput() SshKeyDetailMapOutput {
	return i.ToSshKeyDetailMapOutputWithContext(context.Background())
}

func (i SshKeyDetailMap) ToSshKeyDetailMapOutputWithContext(ctx context.Context) SshKeyDetailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshKeyDetailMapOutput)
}

type SshKeyDetailOutput struct{ *pulumi.OutputState }

func (SshKeyDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshKeyDetail)(nil)).Elem()
}

func (o SshKeyDetailOutput) ToSshKeyDetailOutput() SshKeyDetailOutput {
	return o
}

func (o SshKeyDetailOutput) ToSshKeyDetailOutputWithContext(ctx context.Context) SshKeyDetailOutput {
	return o
}

func (o SshKeyDetailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SshKeyDetail) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SshKeyDetailOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SshKeyDetail) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

func (o SshKeyDetailOutput) SshKeyId() pulumi.IntOutput {
	return o.ApplyT(func(v *SshKeyDetail) pulumi.IntOutput { return v.SshKeyId }).(pulumi.IntOutput)
}

type SshKeyDetailArrayOutput struct{ *pulumi.OutputState }

func (SshKeyDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SshKeyDetail)(nil)).Elem()
}

func (o SshKeyDetailArrayOutput) ToSshKeyDetailArrayOutput() SshKeyDetailArrayOutput {
	return o
}

func (o SshKeyDetailArrayOutput) ToSshKeyDetailArrayOutputWithContext(ctx context.Context) SshKeyDetailArrayOutput {
	return o
}

func (o SshKeyDetailArrayOutput) Index(i pulumi.IntInput) SshKeyDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SshKeyDetail {
		return vs[0].([]*SshKeyDetail)[vs[1].(int)]
	}).(SshKeyDetailOutput)
}

type SshKeyDetailMapOutput struct{ *pulumi.OutputState }

func (SshKeyDetailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SshKeyDetail)(nil)).Elem()
}

func (o SshKeyDetailMapOutput) ToSshKeyDetailMapOutput() SshKeyDetailMapOutput {
	return o
}

func (o SshKeyDetailMapOutput) ToSshKeyDetailMapOutputWithContext(ctx context.Context) SshKeyDetailMapOutput {
	return o
}

func (o SshKeyDetailMapOutput) MapIndex(k pulumi.StringInput) SshKeyDetailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SshKeyDetail {
		return vs[0].(map[string]*SshKeyDetail)[vs[1].(string)]
	}).(SshKeyDetailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SshKeyDetailInput)(nil)).Elem(), &SshKeyDetail{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshKeyDetailArrayInput)(nil)).Elem(), SshKeyDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SshKeyDetailMapInput)(nil)).Elem(), SshKeyDetailMap{})
	pulumi.RegisterOutputType(SshKeyDetailOutput{})
	pulumi.RegisterOutputType(SshKeyDetailArrayOutput{})
	pulumi.RegisterOutputType(SshKeyDetailMapOutput{})
}
