// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hivelocity

import (
	"context"
	"reflect"

	"errors"
	"github.com/embp/pulumi-hivelocity/sdk/go/hivelocity/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VlanDetail struct {
	pulumi.CustomResourceState

	// Location where to create this VLAN
	FacilityCode pulumi.StringOutput `pulumi:"facilityCode"`
	// IDs of ports to include in this VLAN
	PortIds pulumi.IntArrayOutput `pulumi:"portIds"`
	// Tag ID of VLAN
	TagId pulumi.IntOutput `pulumi:"tagId"`
	// Type of VLAN to be created, can be either `private` or `public`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewVlanDetail registers a new resource with the given unique name, arguments, and options.
func NewVlanDetail(ctx *pulumi.Context,
	name string, args *VlanDetailArgs, opts ...pulumi.ResourceOption) (*VlanDetail, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FacilityCode == nil {
		return nil, errors.New("invalid value for required argument 'FacilityCode'")
	}
	if args.PortIds == nil {
		return nil, errors.New("invalid value for required argument 'PortIds'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("hivelocity:index/vlan:vlan"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VlanDetail
	err := ctx.RegisterResource("hivelocity:index/vlanDetail:VlanDetail", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlanDetail gets an existing VlanDetail resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlanDetail(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanDetailState, opts ...pulumi.ResourceOption) (*VlanDetail, error) {
	var resource VlanDetail
	err := ctx.ReadResource("hivelocity:index/vlanDetail:VlanDetail", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VlanDetail resources.
type vlanDetailState struct {
	// Location where to create this VLAN
	FacilityCode *string `pulumi:"facilityCode"`
	// IDs of ports to include in this VLAN
	PortIds []int `pulumi:"portIds"`
	// Tag ID of VLAN
	TagId *int `pulumi:"tagId"`
	// Type of VLAN to be created, can be either `private` or `public`
	Type *string `pulumi:"type"`
}

type VlanDetailState struct {
	// Location where to create this VLAN
	FacilityCode pulumi.StringPtrInput
	// IDs of ports to include in this VLAN
	PortIds pulumi.IntArrayInput
	// Tag ID of VLAN
	TagId pulumi.IntPtrInput
	// Type of VLAN to be created, can be either `private` or `public`
	Type pulumi.StringPtrInput
}

func (VlanDetailState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanDetailState)(nil)).Elem()
}

type vlanDetailArgs struct {
	// Location where to create this VLAN
	FacilityCode string `pulumi:"facilityCode"`
	// IDs of ports to include in this VLAN
	PortIds []int `pulumi:"portIds"`
	// Type of VLAN to be created, can be either `private` or `public`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a VlanDetail resource.
type VlanDetailArgs struct {
	// Location where to create this VLAN
	FacilityCode pulumi.StringInput
	// IDs of ports to include in this VLAN
	PortIds pulumi.IntArrayInput
	// Type of VLAN to be created, can be either `private` or `public`
	Type pulumi.StringInput
}

func (VlanDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanDetailArgs)(nil)).Elem()
}

type VlanDetailInput interface {
	pulumi.Input

	ToVlanDetailOutput() VlanDetailOutput
	ToVlanDetailOutputWithContext(ctx context.Context) VlanDetailOutput
}

func (*VlanDetail) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanDetail)(nil)).Elem()
}

func (i *VlanDetail) ToVlanDetailOutput() VlanDetailOutput {
	return i.ToVlanDetailOutputWithContext(context.Background())
}

func (i *VlanDetail) ToVlanDetailOutputWithContext(ctx context.Context) VlanDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanDetailOutput)
}

// VlanDetailArrayInput is an input type that accepts VlanDetailArray and VlanDetailArrayOutput values.
// You can construct a concrete instance of `VlanDetailArrayInput` via:
//
//	VlanDetailArray{ VlanDetailArgs{...} }
type VlanDetailArrayInput interface {
	pulumi.Input

	ToVlanDetailArrayOutput() VlanDetailArrayOutput
	ToVlanDetailArrayOutputWithContext(context.Context) VlanDetailArrayOutput
}

type VlanDetailArray []VlanDetailInput

func (VlanDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VlanDetail)(nil)).Elem()
}

func (i VlanDetailArray) ToVlanDetailArrayOutput() VlanDetailArrayOutput {
	return i.ToVlanDetailArrayOutputWithContext(context.Background())
}

func (i VlanDetailArray) ToVlanDetailArrayOutputWithContext(ctx context.Context) VlanDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanDetailArrayOutput)
}

// VlanDetailMapInput is an input type that accepts VlanDetailMap and VlanDetailMapOutput values.
// You can construct a concrete instance of `VlanDetailMapInput` via:
//
//	VlanDetailMap{ "key": VlanDetailArgs{...} }
type VlanDetailMapInput interface {
	pulumi.Input

	ToVlanDetailMapOutput() VlanDetailMapOutput
	ToVlanDetailMapOutputWithContext(context.Context) VlanDetailMapOutput
}

type VlanDetailMap map[string]VlanDetailInput

func (VlanDetailMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VlanDetail)(nil)).Elem()
}

func (i VlanDetailMap) ToVlanDetailMapOutput() VlanDetailMapOutput {
	return i.ToVlanDetailMapOutputWithContext(context.Background())
}

func (i VlanDetailMap) ToVlanDetailMapOutputWithContext(ctx context.Context) VlanDetailMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanDetailMapOutput)
}

type VlanDetailOutput struct{ *pulumi.OutputState }

func (VlanDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanDetail)(nil)).Elem()
}

func (o VlanDetailOutput) ToVlanDetailOutput() VlanDetailOutput {
	return o
}

func (o VlanDetailOutput) ToVlanDetailOutputWithContext(ctx context.Context) VlanDetailOutput {
	return o
}

// Location where to create this VLAN
func (o VlanDetailOutput) FacilityCode() pulumi.StringOutput {
	return o.ApplyT(func(v *VlanDetail) pulumi.StringOutput { return v.FacilityCode }).(pulumi.StringOutput)
}

// IDs of ports to include in this VLAN
func (o VlanDetailOutput) PortIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *VlanDetail) pulumi.IntArrayOutput { return v.PortIds }).(pulumi.IntArrayOutput)
}

// Tag ID of VLAN
func (o VlanDetailOutput) TagId() pulumi.IntOutput {
	return o.ApplyT(func(v *VlanDetail) pulumi.IntOutput { return v.TagId }).(pulumi.IntOutput)
}

// Type of VLAN to be created, can be either `private` or `public`
func (o VlanDetailOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VlanDetail) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type VlanDetailArrayOutput struct{ *pulumi.OutputState }

func (VlanDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VlanDetail)(nil)).Elem()
}

func (o VlanDetailArrayOutput) ToVlanDetailArrayOutput() VlanDetailArrayOutput {
	return o
}

func (o VlanDetailArrayOutput) ToVlanDetailArrayOutputWithContext(ctx context.Context) VlanDetailArrayOutput {
	return o
}

func (o VlanDetailArrayOutput) Index(i pulumi.IntInput) VlanDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VlanDetail {
		return vs[0].([]*VlanDetail)[vs[1].(int)]
	}).(VlanDetailOutput)
}

type VlanDetailMapOutput struct{ *pulumi.OutputState }

func (VlanDetailMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VlanDetail)(nil)).Elem()
}

func (o VlanDetailMapOutput) ToVlanDetailMapOutput() VlanDetailMapOutput {
	return o
}

func (o VlanDetailMapOutput) ToVlanDetailMapOutputWithContext(ctx context.Context) VlanDetailMapOutput {
	return o
}

func (o VlanDetailMapOutput) MapIndex(k pulumi.StringInput) VlanDetailOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VlanDetail {
		return vs[0].(map[string]*VlanDetail)[vs[1].(string)]
	}).(VlanDetailOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VlanDetailInput)(nil)).Elem(), &VlanDetail{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanDetailArrayInput)(nil)).Elem(), VlanDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanDetailMapInput)(nil)).Elem(), VlanDetailMap{})
	pulumi.RegisterOutputType(VlanDetailOutput{})
	pulumi.RegisterOutputType(VlanDetailArrayOutput{})
	pulumi.RegisterOutputType(VlanDetailMapOutput{})
}
