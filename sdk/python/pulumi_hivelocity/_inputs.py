# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'OrderGroupDetailBareMetalDeviceArgs',
    'GetBareMetalDeviceFilterArgs',
    'GetDeviceFilterArgs',
    'GetDevicePortFilterArgs',
    'GetHivelocityDevicePortFilterArgs',
    'GetProductFilterArgs',
    'GetSshKeyFilterArgs',
    'OrderGroupBareMetalDeviceArgs',
]

@pulumi.input_type
class OrderGroupDetailBareMetalDeviceArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 location_name: pulumi.Input[str],
                 os_name: pulumi.Input[str],
                 product_id: pulumi.Input[int],
                 bonded: Optional[pulumi.Input[bool]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 force_device_id: Optional[pulumi.Input[int]] = None,
                 ignition_id: Optional[pulumi.Input[int]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 order_id: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 power_status: Optional[pulumi.Input[str]] = None,
                 primary_ip: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 public_ssh_key_id: Optional[pulumi.Input[int]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] hostname: Hostname for this device
        :param pulumi.Input[str] location_name: Deploy device in this location
        :param pulumi.Input[str] os_name: Operating system to install on device
        :param pulumi.Input[int] product_id: Product ID to pick from the stock
        :param pulumi.Input[bool] bonded: When set, prefer only bonded devices
        :param pulumi.Input[int] device_id: Device ID
        :param pulumi.Input[int] force_device_id: Force deployment of this Device ID (internal use only)
        :param pulumi.Input[int] ignition_id: IgnitionConfig ID
        :param pulumi.Input[str] last_updated: Last time this device was updated
        :param pulumi.Input[int] order_id: Order ID
        :param pulumi.Input[str] period: Billing period for device
        :param pulumi.Input[str] power_status: Power status
        :param pulumi.Input[str] primary_ip: Primary IP of device
        :param pulumi.Input[str] product_name: Product Name
        :param pulumi.Input[int] public_ssh_key_id: ID of a SSH Key to apply for device
        :param pulumi.Input[str] script: Post-install script for device
        :param pulumi.Input[int] service_id: Service ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to apply for device
        :param pulumi.Input[int] vlan_id: VLAN ID
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "product_id", product_id)
        if bonded is not None:
            pulumi.set(__self__, "bonded", bonded)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if force_device_id is not None:
            pulumi.set(__self__, "force_device_id", force_device_id)
        if ignition_id is not None:
            pulumi.set(__self__, "ignition_id", ignition_id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if power_status is not None:
            pulumi.set(__self__, "power_status", power_status)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if public_ssh_key_id is not None:
            pulumi.set(__self__, "public_ssh_key_id", public_ssh_key_id)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vlan_id is not None:
            warnings.warn("""This field is deprecated. Please use a VlanDetail resource instead.""", DeprecationWarning)
            pulumi.log.warn("""vlan_id is deprecated: This field is deprecated. Please use a VlanDetail resource instead.""")
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Hostname for this device
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> pulumi.Input[str]:
        """
        Deploy device in this location
        """
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Input[str]:
        """
        Operating system to install on device
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[int]:
        """
        Product ID to pick from the stock
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def bonded(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, prefer only bonded devices
        """
        return pulumi.get(self, "bonded")

    @bonded.setter
    def bonded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bonded", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        """
        Device ID
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="forceDeviceId")
    def force_device_id(self) -> Optional[pulumi.Input[int]]:
        """
        Force deployment of this Device ID (internal use only)
        """
        return pulumi.get(self, "force_device_id")

    @force_device_id.setter
    def force_device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "force_device_id", value)

    @property
    @pulumi.getter(name="ignitionId")
    def ignition_id(self) -> Optional[pulumi.Input[int]]:
        """
        IgnitionConfig ID
        """
        return pulumi.get(self, "ignition_id")

    @ignition_id.setter
    def ignition_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ignition_id", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        """
        Last time this device was updated
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[int]]:
        """
        Order ID
        """
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order_id", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        """
        Billing period for device
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="powerStatus")
    def power_status(self) -> Optional[pulumi.Input[str]]:
        """
        Power status
        """
        return pulumi.get(self, "power_status")

    @power_status.setter
    def power_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_status", value)

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IP of device
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ip", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        """
        Product Name
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="publicSshKeyId")
    def public_ssh_key_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of a SSH Key to apply for device
        """
        return pulumi.get(self, "public_ssh_key_id")

    @public_ssh_key_id.setter
    def public_ssh_key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_ssh_key_id", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        Post-install script for device
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[int]]:
        """
        Service ID
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to apply for device
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID
        """
        warnings.warn("""This field is deprecated. Please use a VlanDetail resource instead.""", DeprecationWarning)
        pulumi.log.warn("""vlan_id is deprecated: This field is deprecated. Please use a VlanDetail resource instead.""")

        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class GetBareMetalDeviceFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDeviceFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDevicePortFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetHivelocityDevicePortFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetProductFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSshKeyFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class OrderGroupBareMetalDeviceArgs:
    def __init__(__self__, *,
                 hostname: pulumi.Input[str],
                 location_name: pulumi.Input[str],
                 os_name: pulumi.Input[str],
                 product_id: pulumi.Input[int],
                 bonded: Optional[pulumi.Input[bool]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 force_device_id: Optional[pulumi.Input[int]] = None,
                 ignition_id: Optional[pulumi.Input[int]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 order_id: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 power_status: Optional[pulumi.Input[str]] = None,
                 primary_ip: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 public_ssh_key_id: Optional[pulumi.Input[int]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] hostname: Hostname for this device
        :param pulumi.Input[str] location_name: Deploy device in this location
        :param pulumi.Input[str] os_name: Operating system to install on device
        :param pulumi.Input[int] product_id: Product ID to pick from the stock
        :param pulumi.Input[bool] bonded: When set, prefer only bonded devices
        :param pulumi.Input[int] device_id: Device ID
        :param pulumi.Input[int] force_device_id: Force deployment of this Device ID (internal use only)
        :param pulumi.Input[int] ignition_id: IgnitionConfig ID
        :param pulumi.Input[str] last_updated: Last time this device was updated
        :param pulumi.Input[int] order_id: Order ID
        :param pulumi.Input[str] period: Billing period for device
        :param pulumi.Input[str] power_status: Power status
        :param pulumi.Input[str] primary_ip: Primary IP of device
        :param pulumi.Input[str] product_name: Product Name
        :param pulumi.Input[int] public_ssh_key_id: ID of a SSH Key to apply for device
        :param pulumi.Input[str] script: Post-install script for device
        :param pulumi.Input[int] service_id: Service ID
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags to apply for device
        :param pulumi.Input[int] vlan_id: VLAN ID
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "product_id", product_id)
        if bonded is not None:
            pulumi.set(__self__, "bonded", bonded)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if force_device_id is not None:
            pulumi.set(__self__, "force_device_id", force_device_id)
        if ignition_id is not None:
            pulumi.set(__self__, "ignition_id", ignition_id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if power_status is not None:
            pulumi.set(__self__, "power_status", power_status)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if public_ssh_key_id is not None:
            pulumi.set(__self__, "public_ssh_key_id", public_ssh_key_id)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vlan_id is not None:
            warnings.warn("""This field is deprecated. Please use a VlanDetail resource instead.""", DeprecationWarning)
            pulumi.log.warn("""vlan_id is deprecated: This field is deprecated. Please use a VlanDetail resource instead.""")
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        Hostname for this device
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> pulumi.Input[str]:
        """
        Deploy device in this location
        """
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Input[str]:
        """
        Operating system to install on device
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Input[int]:
        """
        Product ID to pick from the stock
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def bonded(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, prefer only bonded devices
        """
        return pulumi.get(self, "bonded")

    @bonded.setter
    def bonded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bonded", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        """
        Device ID
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="forceDeviceId")
    def force_device_id(self) -> Optional[pulumi.Input[int]]:
        """
        Force deployment of this Device ID (internal use only)
        """
        return pulumi.get(self, "force_device_id")

    @force_device_id.setter
    def force_device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "force_device_id", value)

    @property
    @pulumi.getter(name="ignitionId")
    def ignition_id(self) -> Optional[pulumi.Input[int]]:
        """
        IgnitionConfig ID
        """
        return pulumi.get(self, "ignition_id")

    @ignition_id.setter
    def ignition_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ignition_id", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        """
        Last time this device was updated
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[int]]:
        """
        Order ID
        """
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order_id", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        """
        Billing period for device
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="powerStatus")
    def power_status(self) -> Optional[pulumi.Input[str]]:
        """
        Power status
        """
        return pulumi.get(self, "power_status")

    @power_status.setter
    def power_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_status", value)

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IP of device
        """
        return pulumi.get(self, "primary_ip")

    @primary_ip.setter
    def primary_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_ip", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        """
        Product Name
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="publicSshKeyId")
    def public_ssh_key_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of a SSH Key to apply for device
        """
        return pulumi.get(self, "public_ssh_key_id")

    @public_ssh_key_id.setter
    def public_ssh_key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_ssh_key_id", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        Post-install script for device
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[int]]:
        """
        Service ID
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Tags to apply for device
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID
        """
        warnings.warn("""This field is deprecated. Please use a VlanDetail resource instead.""", DeprecationWarning)
        pulumi.log.warn("""vlan_id is deprecated: This field is deprecated. Please use a VlanDetail resource instead.""")

        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


