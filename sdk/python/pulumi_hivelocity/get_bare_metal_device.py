# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBareMetalDeviceResult',
    'AwaitableGetBareMetalDeviceResult',
    'get_bare_metal_device',
    'get_bare_metal_device_output',
]

@pulumi.output_type
class GetBareMetalDeviceResult:
    """
    A collection of values returned by getBareMetalDevice.
    """
    def __init__(__self__, device_id=None, filters=None, first=None, hostname=None, id=None, last_updated=None, location_name=None, order_id=None, os_name=None, period=None, power_status=None, primary_ip=None, product_id=None, product_name=None, public_ssh_key_id=None, script=None, service_id=None, tags=None, vlan_id=None):
        if device_id and not isinstance(device_id, int):
            raise TypeError("Expected argument 'device_id' to be a int")
        pulumi.set(__self__, "device_id", device_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if first and not isinstance(first, bool):
            raise TypeError("Expected argument 'first' to be a bool")
        pulumi.set(__self__, "first", first)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if location_name and not isinstance(location_name, str):
            raise TypeError("Expected argument 'location_name' to be a str")
        pulumi.set(__self__, "location_name", location_name)
        if order_id and not isinstance(order_id, int):
            raise TypeError("Expected argument 'order_id' to be a int")
        pulumi.set(__self__, "order_id", order_id)
        if os_name and not isinstance(os_name, str):
            raise TypeError("Expected argument 'os_name' to be a str")
        pulumi.set(__self__, "os_name", os_name)
        if period and not isinstance(period, str):
            raise TypeError("Expected argument 'period' to be a str")
        pulumi.set(__self__, "period", period)
        if power_status and not isinstance(power_status, str):
            raise TypeError("Expected argument 'power_status' to be a str")
        pulumi.set(__self__, "power_status", power_status)
        if primary_ip and not isinstance(primary_ip, str):
            raise TypeError("Expected argument 'primary_ip' to be a str")
        pulumi.set(__self__, "primary_ip", primary_ip)
        if product_id and not isinstance(product_id, int):
            raise TypeError("Expected argument 'product_id' to be a int")
        pulumi.set(__self__, "product_id", product_id)
        if product_name and not isinstance(product_name, str):
            raise TypeError("Expected argument 'product_name' to be a str")
        pulumi.set(__self__, "product_name", product_name)
        if public_ssh_key_id and not isinstance(public_ssh_key_id, int):
            raise TypeError("Expected argument 'public_ssh_key_id' to be a int")
        pulumi.set(__self__, "public_ssh_key_id", public_ssh_key_id)
        if script and not isinstance(script, str):
            raise TypeError("Expected argument 'script' to be a str")
        pulumi.set(__self__, "script", script)
        if service_id and not isinstance(service_id, int):
            raise TypeError("Expected argument 'service_id' to be a int")
        pulumi.set(__self__, "service_id", service_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if vlan_id and not isinstance(vlan_id, int):
            raise TypeError("Expected argument 'vlan_id' to be a int")
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBareMetalDeviceFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def first(self) -> Optional[bool]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> int:
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="powerStatus")
    def power_status(self) -> str:
        return pulumi.get(self, "power_status")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> str:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> int:
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> str:
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="publicSshKeyId")
    def public_ssh_key_id(self) -> Optional[int]:
        return pulumi.get(self, "public_ssh_key_id")

    @property
    @pulumi.getter
    def script(self) -> str:
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> int:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        return pulumi.get(self, "vlan_id")


class AwaitableGetBareMetalDeviceResult(GetBareMetalDeviceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBareMetalDeviceResult(
            device_id=self.device_id,
            filters=self.filters,
            first=self.first,
            hostname=self.hostname,
            id=self.id,
            last_updated=self.last_updated,
            location_name=self.location_name,
            order_id=self.order_id,
            os_name=self.os_name,
            period=self.period,
            power_status=self.power_status,
            primary_ip=self.primary_ip,
            product_id=self.product_id,
            product_name=self.product_name,
            public_ssh_key_id=self.public_ssh_key_id,
            script=self.script,
            service_id=self.service_id,
            tags=self.tags,
            vlan_id=self.vlan_id)


def get_bare_metal_device(device_id: Optional[int] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetBareMetalDeviceFilterArgs']]] = None,
                          first: Optional[bool] = None,
                          hostname: Optional[str] = None,
                          last_updated: Optional[str] = None,
                          location_name: Optional[str] = None,
                          order_id: Optional[int] = None,
                          os_name: Optional[str] = None,
                          period: Optional[str] = None,
                          power_status: Optional[str] = None,
                          primary_ip: Optional[str] = None,
                          product_id: Optional[int] = None,
                          product_name: Optional[str] = None,
                          public_ssh_key_id: Optional[int] = None,
                          script: Optional[str] = None,
                          service_id: Optional[int] = None,
                          tags: Optional[Sequence[str]] = None,
                          vlan_id: Optional[int] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBareMetalDeviceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['filters'] = filters
    __args__['first'] = first
    __args__['hostname'] = hostname
    __args__['lastUpdated'] = last_updated
    __args__['locationName'] = location_name
    __args__['orderId'] = order_id
    __args__['osName'] = os_name
    __args__['period'] = period
    __args__['powerStatus'] = power_status
    __args__['primaryIp'] = primary_ip
    __args__['productId'] = product_id
    __args__['productName'] = product_name
    __args__['publicSshKeyId'] = public_ssh_key_id
    __args__['script'] = script
    __args__['serviceId'] = service_id
    __args__['tags'] = tags
    __args__['vlanId'] = vlan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('hivelocity:index/getBareMetalDevice:getBareMetalDevice', __args__, opts=opts, typ=GetBareMetalDeviceResult).value

    return AwaitableGetBareMetalDeviceResult(
        device_id=pulumi.get(__ret__, 'device_id'),
        filters=pulumi.get(__ret__, 'filters'),
        first=pulumi.get(__ret__, 'first'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        last_updated=pulumi.get(__ret__, 'last_updated'),
        location_name=pulumi.get(__ret__, 'location_name'),
        order_id=pulumi.get(__ret__, 'order_id'),
        os_name=pulumi.get(__ret__, 'os_name'),
        period=pulumi.get(__ret__, 'period'),
        power_status=pulumi.get(__ret__, 'power_status'),
        primary_ip=pulumi.get(__ret__, 'primary_ip'),
        product_id=pulumi.get(__ret__, 'product_id'),
        product_name=pulumi.get(__ret__, 'product_name'),
        public_ssh_key_id=pulumi.get(__ret__, 'public_ssh_key_id'),
        script=pulumi.get(__ret__, 'script'),
        service_id=pulumi.get(__ret__, 'service_id'),
        tags=pulumi.get(__ret__, 'tags'),
        vlan_id=pulumi.get(__ret__, 'vlan_id'))


@_utilities.lift_output_func(get_bare_metal_device)
def get_bare_metal_device_output(device_id: Optional[pulumi.Input[Optional[int]]] = None,
                                 filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetBareMetalDeviceFilterArgs']]]]] = None,
                                 first: Optional[pulumi.Input[Optional[bool]]] = None,
                                 hostname: Optional[pulumi.Input[Optional[str]]] = None,
                                 last_updated: Optional[pulumi.Input[Optional[str]]] = None,
                                 location_name: Optional[pulumi.Input[Optional[str]]] = None,
                                 order_id: Optional[pulumi.Input[Optional[int]]] = None,
                                 os_name: Optional[pulumi.Input[Optional[str]]] = None,
                                 period: Optional[pulumi.Input[Optional[str]]] = None,
                                 power_status: Optional[pulumi.Input[Optional[str]]] = None,
                                 primary_ip: Optional[pulumi.Input[Optional[str]]] = None,
                                 product_id: Optional[pulumi.Input[Optional[int]]] = None,
                                 product_name: Optional[pulumi.Input[Optional[str]]] = None,
                                 public_ssh_key_id: Optional[pulumi.Input[Optional[int]]] = None,
                                 script: Optional[pulumi.Input[Optional[str]]] = None,
                                 service_id: Optional[pulumi.Input[Optional[int]]] = None,
                                 tags: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 vlan_id: Optional[pulumi.Input[Optional[int]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBareMetalDeviceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
