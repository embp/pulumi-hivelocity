# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDeviceResult',
    'AwaitableGetDeviceResult',
    'get_device',
    'get_device_output',
]

@pulumi.output_type
class GetDeviceResult:
    """
    A collection of values returned by getDevice.
    """
    def __init__(__self__, device_id=None, device_type=None, filters=None, first=None, hostname=None, id=None, ip_addresses=None, ipmi_address=None, ipmi_enabled=None, location=None, metadata=None, name=None, power_status=None, service_plan=None, status=None, tags=None):
        if device_id and not isinstance(device_id, int):
            raise TypeError("Expected argument 'device_id' to be a int")
        pulumi.set(__self__, "device_id", device_id)
        if device_type and not isinstance(device_type, str):
            raise TypeError("Expected argument 'device_type' to be a str")
        pulumi.set(__self__, "device_type", device_type)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if first and not isinstance(first, bool):
            raise TypeError("Expected argument 'first' to be a bool")
        pulumi.set(__self__, "first", first)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ipmi_address and not isinstance(ipmi_address, str):
            raise TypeError("Expected argument 'ipmi_address' to be a str")
        pulumi.set(__self__, "ipmi_address", ipmi_address)
        if ipmi_enabled and not isinstance(ipmi_enabled, bool):
            raise TypeError("Expected argument 'ipmi_enabled' to be a bool")
        pulumi.set(__self__, "ipmi_enabled", ipmi_enabled)
        if location and not isinstance(location, dict):
            raise TypeError("Expected argument 'location' to be a dict")
        pulumi.set(__self__, "location", location)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if power_status and not isinstance(power_status, str):
            raise TypeError("Expected argument 'power_status' to be a str")
        pulumi.set(__self__, "power_status", power_status)
        if service_plan and not isinstance(service_plan, int):
            raise TypeError("Expected argument 'service_plan' to be a int")
        pulumi.set(__self__, "service_plan", service_plan)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDeviceFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def first(self) -> Optional[bool]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipmiAddress")
    def ipmi_address(self) -> str:
        return pulumi.get(self, "ipmi_address")

    @property
    @pulumi.getter(name="ipmiEnabled")
    def ipmi_enabled(self) -> bool:
        return pulumi.get(self, "ipmi_enabled")

    @property
    @pulumi.getter
    def location(self) -> Mapping[str, str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="powerStatus")
    def power_status(self) -> str:
        return pulumi.get(self, "power_status")

    @property
    @pulumi.getter(name="servicePlan")
    def service_plan(self) -> int:
        return pulumi.get(self, "service_plan")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


class AwaitableGetDeviceResult(GetDeviceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceResult(
            device_id=self.device_id,
            device_type=self.device_type,
            filters=self.filters,
            first=self.first,
            hostname=self.hostname,
            id=self.id,
            ip_addresses=self.ip_addresses,
            ipmi_address=self.ipmi_address,
            ipmi_enabled=self.ipmi_enabled,
            location=self.location,
            metadata=self.metadata,
            name=self.name,
            power_status=self.power_status,
            service_plan=self.service_plan,
            status=self.status,
            tags=self.tags)


def get_device(filters: Optional[Sequence[pulumi.InputType['GetDeviceFilterArgs']]] = None,
               first: Optional[bool] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['first'] = first
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('hivelocity:index/getDevice:getDevice', __args__, opts=opts, typ=GetDeviceResult).value

    return AwaitableGetDeviceResult(
        device_id=pulumi.get(__ret__, 'device_id'),
        device_type=pulumi.get(__ret__, 'device_type'),
        filters=pulumi.get(__ret__, 'filters'),
        first=pulumi.get(__ret__, 'first'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        ip_addresses=pulumi.get(__ret__, 'ip_addresses'),
        ipmi_address=pulumi.get(__ret__, 'ipmi_address'),
        ipmi_enabled=pulumi.get(__ret__, 'ipmi_enabled'),
        location=pulumi.get(__ret__, 'location'),
        metadata=pulumi.get(__ret__, 'metadata'),
        name=pulumi.get(__ret__, 'name'),
        power_status=pulumi.get(__ret__, 'power_status'),
        service_plan=pulumi.get(__ret__, 'service_plan'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_device)
def get_device_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDeviceFilterArgs']]]]] = None,
                      first: Optional[pulumi.Input[Optional[bool]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeviceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
