# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDeviceInitialCredsResult',
    'AwaitableGetDeviceInitialCredsResult',
    'get_device_initial_creds',
    'get_device_initial_creds_output',
]

@pulumi.output_type
class GetDeviceInitialCredsResult:
    """
    A collection of values returned by getDeviceInitialCreds.
    """
    def __init__(__self__, device_id=None, id=None, locker_url=None, password=None, port=None, user=None):
        if device_id and not isinstance(device_id, int):
            raise TypeError("Expected argument 'device_id' to be a int")
        pulumi.set(__self__, "device_id", device_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locker_url and not isinstance(locker_url, str):
            raise TypeError("Expected argument 'locker_url' to be a str")
        pulumi.set(__self__, "locker_url", locker_url)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lockerUrl")
    def locker_url(self) -> str:
        return pulumi.get(self, "locker_url")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


class AwaitableGetDeviceInitialCredsResult(GetDeviceInitialCredsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceInitialCredsResult(
            device_id=self.device_id,
            id=self.id,
            locker_url=self.locker_url,
            password=self.password,
            port=self.port,
            user=self.user)


def get_device_initial_creds(device_id: Optional[int] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceInitialCredsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('hivelocity:index/getDeviceInitialCreds:getDeviceInitialCreds', __args__, opts=opts, typ=GetDeviceInitialCredsResult).value

    return AwaitableGetDeviceInitialCredsResult(
        device_id=pulumi.get(__ret__, 'device_id'),
        id=pulumi.get(__ret__, 'id'),
        locker_url=pulumi.get(__ret__, 'locker_url'),
        password=pulumi.get(__ret__, 'password'),
        port=pulumi.get(__ret__, 'port'),
        user=pulumi.get(__ret__, 'user'))


@_utilities.lift_output_func(get_device_initial_creds)
def get_device_initial_creds_output(device_id: Optional[pulumi.Input[int]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeviceInitialCredsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
