# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetEffectiveIgnitionResult',
    'AwaitableGetEffectiveIgnitionResult',
    'get_effective_ignition',
    'get_effective_ignition_output',
]

@pulumi.output_type
class GetEffectiveIgnitionResult:
    """
    A collection of values returned by getEffectiveIgnition.
    """
    def __init__(__self__, contents=None, device_id=None, id=None):
        if contents and not isinstance(contents, str):
            raise TypeError("Expected argument 'contents' to be a str")
        pulumi.set(__self__, "contents", contents)
        if device_id and not isinstance(device_id, int):
            raise TypeError("Expected argument 'device_id' to be a int")
        pulumi.set(__self__, "device_id", device_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def contents(self) -> str:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetEffectiveIgnitionResult(GetEffectiveIgnitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEffectiveIgnitionResult(
            contents=self.contents,
            device_id=self.device_id,
            id=self.id)


def get_effective_ignition(device_id: Optional[int] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEffectiveIgnitionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['deviceId'] = device_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('hivelocity:index/getEffectiveIgnition:getEffectiveIgnition', __args__, opts=opts, typ=GetEffectiveIgnitionResult).value

    return AwaitableGetEffectiveIgnitionResult(
        contents=pulumi.get(__ret__, 'contents'),
        device_id=pulumi.get(__ret__, 'device_id'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_effective_ignition)
def get_effective_ignition_output(device_id: Optional[pulumi.Input[int]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEffectiveIgnitionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
