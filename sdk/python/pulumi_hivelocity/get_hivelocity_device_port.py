# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetHivelocityDevicePortResult',
    'AwaitableGetHivelocityDevicePortResult',
    'get_hivelocity_device_port',
    'get_hivelocity_device_port_output',
]

warnings.warn("""hivelocity.index/gethivelocitydeviceport.getHivelocityDevicePort has been deprecated in favor of hivelocity.index/getdeviceport.getDevicePort""", DeprecationWarning)

@pulumi.output_type
class GetHivelocityDevicePortResult:
    """
    A collection of values returned by getHivelocityDevicePort.
    """
    def __init__(__self__, device_id=None, filters=None, first=None, id=None, is_bond=None, name=None, port_id=None, private=None):
        if device_id and not isinstance(device_id, int):
            raise TypeError("Expected argument 'device_id' to be a int")
        pulumi.set(__self__, "device_id", device_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if first and not isinstance(first, bool):
            raise TypeError("Expected argument 'first' to be a bool")
        pulumi.set(__self__, "first", first)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_bond and not isinstance(is_bond, bool):
            raise TypeError("Expected argument 'is_bond' to be a bool")
        pulumi.set(__self__, "is_bond", is_bond)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port_id and not isinstance(port_id, int):
            raise TypeError("Expected argument 'port_id' to be a int")
        pulumi.set(__self__, "port_id", port_id)
        if private and not isinstance(private, bool):
            raise TypeError("Expected argument 'private' to be a bool")
        pulumi.set(__self__, "private", private)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetHivelocityDevicePortFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def first(self) -> Optional[bool]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isBond")
    def is_bond(self) -> bool:
        return pulumi.get(self, "is_bond")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="portId")
    def port_id(self) -> int:
        return pulumi.get(self, "port_id")

    @property
    @pulumi.getter
    def private(self) -> bool:
        return pulumi.get(self, "private")


class AwaitableGetHivelocityDevicePortResult(GetHivelocityDevicePortResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHivelocityDevicePortResult(
            device_id=self.device_id,
            filters=self.filters,
            first=self.first,
            id=self.id,
            is_bond=self.is_bond,
            name=self.name,
            port_id=self.port_id,
            private=self.private)


def get_hivelocity_device_port(device_id: Optional[int] = None,
                               filters: Optional[Sequence[pulumi.InputType['GetHivelocityDevicePortFilterArgs']]] = None,
                               first: Optional[bool] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHivelocityDevicePortResult:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""get_hivelocity_device_port is deprecated: hivelocity.index/gethivelocitydeviceport.getHivelocityDevicePort has been deprecated in favor of hivelocity.index/getdeviceport.getDevicePort""")
    __args__ = dict()
    __args__['deviceId'] = device_id
    __args__['filters'] = filters
    __args__['first'] = first
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('hivelocity:index/getHivelocityDevicePort:getHivelocityDevicePort', __args__, opts=opts, typ=GetHivelocityDevicePortResult).value

    return AwaitableGetHivelocityDevicePortResult(
        device_id=pulumi.get(__ret__, 'device_id'),
        filters=pulumi.get(__ret__, 'filters'),
        first=pulumi.get(__ret__, 'first'),
        id=pulumi.get(__ret__, 'id'),
        is_bond=pulumi.get(__ret__, 'is_bond'),
        name=pulumi.get(__ret__, 'name'),
        port_id=pulumi.get(__ret__, 'port_id'),
        private=pulumi.get(__ret__, 'private'))


@_utilities.lift_output_func(get_hivelocity_device_port)
def get_hivelocity_device_port_output(device_id: Optional[pulumi.Input[int]] = None,
                                      filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetHivelocityDevicePortFilterArgs']]]]] = None,
                                      first: Optional[pulumi.Input[Optional[bool]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHivelocityDevicePortResult]:
    """
    Use this data source to access information about an existing resource.
    """
    pulumi.log.warn("""get_hivelocity_device_port is deprecated: hivelocity.index/gethivelocitydeviceport.getHivelocityDevicePort has been deprecated in favor of hivelocity.index/getdeviceport.getDevicePort""")
    ...
