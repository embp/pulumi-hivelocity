# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSshKeyResult',
    'AwaitableGetSshKeyResult',
    'get_ssh_key',
    'get_ssh_key_output',
]

@pulumi.output_type
class GetSshKeyResult:
    """
    A collection of values returned by getSshKey.
    """
    def __init__(__self__, filters=None, first=None, id=None, name=None, public_key=None, ssh_key_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if first and not isinstance(first, bool):
            raise TypeError("Expected argument 'first' to be a bool")
        pulumi.set(__self__, "first", first)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if ssh_key_id and not isinstance(ssh_key_id, int):
            raise TypeError("Expected argument 'ssh_key_id' to be a int")
        pulumi.set(__self__, "ssh_key_id", ssh_key_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSshKeyFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def first(self) -> Optional[bool]:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> int:
        return pulumi.get(self, "ssh_key_id")


class AwaitableGetSshKeyResult(GetSshKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSshKeyResult(
            filters=self.filters,
            first=self.first,
            id=self.id,
            name=self.name,
            public_key=self.public_key,
            ssh_key_id=self.ssh_key_id)


def get_ssh_key(filters: Optional[Sequence[pulumi.InputType['GetSshKeyFilterArgs']]] = None,
                first: Optional[bool] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSshKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['first'] = first
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('hivelocity:index/getSshKey:getSshKey', __args__, opts=opts, typ=GetSshKeyResult).value

    return AwaitableGetSshKeyResult(
        filters=pulumi.get(__ret__, 'filters'),
        first=pulumi.get(__ret__, 'first'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        public_key=pulumi.get(__ret__, 'public_key'),
        ssh_key_id=pulumi.get(__ret__, 'ssh_key_id'))


@_utilities.lift_output_func(get_ssh_key)
def get_ssh_key_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSshKeyFilterArgs']]]]] = None,
                       first: Optional[pulumi.Input[Optional[bool]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSshKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
