# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'OrderGroupDetailBareMetalDevice',
    'GetBareMetalDeviceFilterResult',
    'GetDeviceFilterResult',
    'GetDevicePortFilterResult',
    'GetHivelocityDevicePortFilterResult',
    'GetProductFilterResult',
    'GetSshKeyFilterResult',
    'OrderGroupBareMetalDevice',
]

@pulumi.output_type
class OrderGroupDetailBareMetalDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationName":
            suggest = "location_name"
        elif key == "osName":
            suggest = "os_name"
        elif key == "productId":
            suggest = "product_id"
        elif key == "deviceId":
            suggest = "device_id"
        elif key == "forceDeviceId":
            suggest = "force_device_id"
        elif key == "ignitionId":
            suggest = "ignition_id"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "orderId":
            suggest = "order_id"
        elif key == "powerStatus":
            suggest = "power_status"
        elif key == "primaryIp":
            suggest = "primary_ip"
        elif key == "productName":
            suggest = "product_name"
        elif key == "publicSshKeyId":
            suggest = "public_ssh_key_id"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderGroupDetailBareMetalDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderGroupDetailBareMetalDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderGroupDetailBareMetalDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: str,
                 location_name: str,
                 os_name: str,
                 product_id: int,
                 bonded: Optional[bool] = None,
                 device_id: Optional[int] = None,
                 force_device_id: Optional[int] = None,
                 ignition_id: Optional[int] = None,
                 last_updated: Optional[str] = None,
                 order_id: Optional[int] = None,
                 period: Optional[str] = None,
                 power_status: Optional[str] = None,
                 primary_ip: Optional[str] = None,
                 product_name: Optional[str] = None,
                 public_ssh_key_id: Optional[int] = None,
                 script: Optional[str] = None,
                 service_id: Optional[int] = None,
                 tags: Optional[Sequence[str]] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str hostname: Hostname for this device
        :param str location_name: Deploy device in this location
        :param str os_name: Operating system to install on device
        :param int product_id: Product ID to pick from the stock
        :param bool bonded: When set, prefer only bonded devices
        :param int device_id: Device ID
        :param int force_device_id: Force deployment of this Device ID (internal use only)
        :param int ignition_id: IgnitionConfig ID
        :param str last_updated: Last time this device was updated
        :param int order_id: Order ID
        :param str period: Billing period for device
        :param str power_status: Power status
        :param str primary_ip: Primary IP of device
        :param str product_name: Product Name
        :param int public_ssh_key_id: ID of a SSH Key to apply for device
        :param str script: Post-install script for device
        :param int service_id: Service ID
        :param Sequence[str] tags: Tags to apply for device
        :param int vlan_id: VLAN ID
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "product_id", product_id)
        if bonded is not None:
            pulumi.set(__self__, "bonded", bonded)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if force_device_id is not None:
            pulumi.set(__self__, "force_device_id", force_device_id)
        if ignition_id is not None:
            pulumi.set(__self__, "ignition_id", ignition_id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if power_status is not None:
            pulumi.set(__self__, "power_status", power_status)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if public_ssh_key_id is not None:
            pulumi.set(__self__, "public_ssh_key_id", public_ssh_key_id)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Hostname for this device
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        """
        Deploy device in this location
        """
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Operating system to install on device
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> int:
        """
        Product ID to pick from the stock
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def bonded(self) -> Optional[bool]:
        """
        When set, prefer only bonded devices
        """
        return pulumi.get(self, "bonded")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[int]:
        """
        Device ID
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="forceDeviceId")
    def force_device_id(self) -> Optional[int]:
        """
        Force deployment of this Device ID (internal use only)
        """
        return pulumi.get(self, "force_device_id")

    @property
    @pulumi.getter(name="ignitionId")
    def ignition_id(self) -> Optional[int]:
        """
        IgnitionConfig ID
        """
        return pulumi.get(self, "ignition_id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[str]:
        """
        Last time this device was updated
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[int]:
        """
        Order ID
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter
    def period(self) -> Optional[str]:
        """
        Billing period for device
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="powerStatus")
    def power_status(self) -> Optional[str]:
        """
        Power status
        """
        return pulumi.get(self, "power_status")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[str]:
        """
        Primary IP of device
        """
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        Product Name
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="publicSshKeyId")
    def public_ssh_key_id(self) -> Optional[int]:
        """
        ID of a SSH Key to apply for device
        """
        return pulumi.get(self, "public_ssh_key_id")

    @property
    @pulumi.getter
    def script(self) -> Optional[str]:
        """
        Post-install script for device
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[int]:
        """
        Service ID
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Tags to apply for device
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        VLAN ID
        """
        warnings.warn("""This field is deprecated. Please use a VlanDetail resource instead.""", DeprecationWarning)
        pulumi.log.warn("""vlan_id is deprecated: This field is deprecated. Please use a VlanDetail resource instead.""")

        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetBareMetalDeviceFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDeviceFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDevicePortFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetHivelocityDevicePortFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProductFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSshKeyFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class OrderGroupBareMetalDevice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locationName":
            suggest = "location_name"
        elif key == "osName":
            suggest = "os_name"
        elif key == "productId":
            suggest = "product_id"
        elif key == "deviceId":
            suggest = "device_id"
        elif key == "forceDeviceId":
            suggest = "force_device_id"
        elif key == "ignitionId":
            suggest = "ignition_id"
        elif key == "lastUpdated":
            suggest = "last_updated"
        elif key == "orderId":
            suggest = "order_id"
        elif key == "powerStatus":
            suggest = "power_status"
        elif key == "primaryIp":
            suggest = "primary_ip"
        elif key == "productName":
            suggest = "product_name"
        elif key == "publicSshKeyId":
            suggest = "public_ssh_key_id"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrderGroupBareMetalDevice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrderGroupBareMetalDevice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrderGroupBareMetalDevice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hostname: str,
                 location_name: str,
                 os_name: str,
                 product_id: int,
                 bonded: Optional[bool] = None,
                 device_id: Optional[int] = None,
                 force_device_id: Optional[int] = None,
                 ignition_id: Optional[int] = None,
                 last_updated: Optional[str] = None,
                 order_id: Optional[int] = None,
                 period: Optional[str] = None,
                 power_status: Optional[str] = None,
                 primary_ip: Optional[str] = None,
                 product_name: Optional[str] = None,
                 public_ssh_key_id: Optional[int] = None,
                 script: Optional[str] = None,
                 service_id: Optional[int] = None,
                 tags: Optional[Sequence[str]] = None,
                 vlan_id: Optional[int] = None):
        """
        :param str hostname: Hostname for this device
        :param str location_name: Deploy device in this location
        :param str os_name: Operating system to install on device
        :param int product_id: Product ID to pick from the stock
        :param bool bonded: When set, prefer only bonded devices
        :param int device_id: Device ID
        :param int force_device_id: Force deployment of this Device ID (internal use only)
        :param int ignition_id: IgnitionConfig ID
        :param str last_updated: Last time this device was updated
        :param int order_id: Order ID
        :param str period: Billing period for device
        :param str power_status: Power status
        :param str primary_ip: Primary IP of device
        :param str product_name: Product Name
        :param int public_ssh_key_id: ID of a SSH Key to apply for device
        :param str script: Post-install script for device
        :param int service_id: Service ID
        :param Sequence[str] tags: Tags to apply for device
        :param int vlan_id: VLAN ID
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "location_name", location_name)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "product_id", product_id)
        if bonded is not None:
            pulumi.set(__self__, "bonded", bonded)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if force_device_id is not None:
            pulumi.set(__self__, "force_device_id", force_device_id)
        if ignition_id is not None:
            pulumi.set(__self__, "ignition_id", ignition_id)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if power_status is not None:
            pulumi.set(__self__, "power_status", power_status)
        if primary_ip is not None:
            pulumi.set(__self__, "primary_ip", primary_ip)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if public_ssh_key_id is not None:
            pulumi.set(__self__, "public_ssh_key_id", public_ssh_key_id)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        Hostname for this device
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> str:
        """
        Deploy device in this location
        """
        return pulumi.get(self, "location_name")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        Operating system to install on device
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> int:
        """
        Product ID to pick from the stock
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def bonded(self) -> Optional[bool]:
        """
        When set, prefer only bonded devices
        """
        return pulumi.get(self, "bonded")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[int]:
        """
        Device ID
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="forceDeviceId")
    def force_device_id(self) -> Optional[int]:
        """
        Force deployment of this Device ID (internal use only)
        """
        return pulumi.get(self, "force_device_id")

    @property
    @pulumi.getter(name="ignitionId")
    def ignition_id(self) -> Optional[int]:
        """
        IgnitionConfig ID
        """
        return pulumi.get(self, "ignition_id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[str]:
        """
        Last time this device was updated
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[int]:
        """
        Order ID
        """
        return pulumi.get(self, "order_id")

    @property
    @pulumi.getter
    def period(self) -> Optional[str]:
        """
        Billing period for device
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="powerStatus")
    def power_status(self) -> Optional[str]:
        """
        Power status
        """
        return pulumi.get(self, "power_status")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> Optional[str]:
        """
        Primary IP of device
        """
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[str]:
        """
        Product Name
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="publicSshKeyId")
    def public_ssh_key_id(self) -> Optional[int]:
        """
        ID of a SSH Key to apply for device
        """
        return pulumi.get(self, "public_ssh_key_id")

    @property
    @pulumi.getter
    def script(self) -> Optional[str]:
        """
        Post-install script for device
        """
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[int]:
        """
        Service ID
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        """
        Tags to apply for device
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        VLAN ID
        """
        warnings.warn("""This field is deprecated. Please use a VlanDetail resource instead.""", DeprecationWarning)
        pulumi.log.warn("""vlan_id is deprecated: This field is deprecated. Please use a VlanDetail resource instead.""")

        return pulumi.get(self, "vlan_id")


