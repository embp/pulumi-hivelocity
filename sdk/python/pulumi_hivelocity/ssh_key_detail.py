# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SshKeyDetailArgs', 'SshKeyDetail']

@pulumi.input_type
class SshKeyDetailArgs:
    def __init__(__self__, *,
                 public_key: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 ssh_key_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SshKeyDetail resource.
        """
        pulumi.set(__self__, "public_key", public_key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ssh_key_id is not None:
            pulumi.set(__self__, "ssh_key_id", ssh_key_id)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssh_key_id")

    @ssh_key_id.setter
    def ssh_key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssh_key_id", value)


@pulumi.input_type
class _SshKeyDetailState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 ssh_key_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SshKeyDetail resources.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if ssh_key_id is not None:
            pulumi.set(__self__, "ssh_key_id", ssh_key_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ssh_key_id")

    @ssh_key_id.setter
    def ssh_key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssh_key_id", value)


class SshKeyDetail(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 ssh_key_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a SshKeyDetail resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SshKeyDetailArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SshKeyDetail resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SshKeyDetailArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SshKeyDetailArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None,
                 ssh_key_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SshKeyDetailArgs.__new__(SshKeyDetailArgs)

            __props__.__dict__["name"] = name
            if public_key is None and not opts.urn:
                raise TypeError("Missing required property 'public_key'")
            __props__.__dict__["public_key"] = public_key
            __props__.__dict__["ssh_key_id"] = ssh_key_id
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="hivelocity:index/sshKey:sshKey")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(SshKeyDetail, __self__).__init__(
            'hivelocity:index/sshKeyDetail:SshKeyDetail',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            public_key: Optional[pulumi.Input[str]] = None,
            ssh_key_id: Optional[pulumi.Input[int]] = None) -> 'SshKeyDetail':
        """
        Get an existing SshKeyDetail resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SshKeyDetailState.__new__(_SshKeyDetailState)

        __props__.__dict__["name"] = name
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["ssh_key_id"] = ssh_key_id
        return SshKeyDetail(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="sshKeyId")
    def ssh_key_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ssh_key_id")

