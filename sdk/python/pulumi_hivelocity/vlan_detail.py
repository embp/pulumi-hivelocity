# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VlanDetailArgs', 'VlanDetail']

@pulumi.input_type
class VlanDetailArgs:
    def __init__(__self__, *,
                 facility_code: pulumi.Input[str],
                 port_ids: pulumi.Input[Sequence[pulumi.Input[int]]],
                 type: pulumi.Input[str]):
        """
        The set of arguments for constructing a VlanDetail resource.
        :param pulumi.Input[str] facility_code: Location where to create this VLAN
        :param pulumi.Input[Sequence[pulumi.Input[int]]] port_ids: IDs of ports to include in this VLAN
        :param pulumi.Input[str] type: Type of VLAN to be created, can be either `private` or `public`
        """
        pulumi.set(__self__, "facility_code", facility_code)
        pulumi.set(__self__, "port_ids", port_ids)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="facilityCode")
    def facility_code(self) -> pulumi.Input[str]:
        """
        Location where to create this VLAN
        """
        return pulumi.get(self, "facility_code")

    @facility_code.setter
    def facility_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "facility_code", value)

    @property
    @pulumi.getter(name="portIds")
    def port_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        IDs of ports to include in this VLAN
        """
        return pulumi.get(self, "port_ids")

    @port_ids.setter
    def port_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "port_ids", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of VLAN to be created, can be either `private` or `public`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _VlanDetailState:
    def __init__(__self__, *,
                 facility_code: Optional[pulumi.Input[str]] = None,
                 port_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tag_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VlanDetail resources.
        :param pulumi.Input[str] facility_code: Location where to create this VLAN
        :param pulumi.Input[Sequence[pulumi.Input[int]]] port_ids: IDs of ports to include in this VLAN
        :param pulumi.Input[int] tag_id: Tag ID of VLAN
        :param pulumi.Input[str] type: Type of VLAN to be created, can be either `private` or `public`
        """
        if facility_code is not None:
            pulumi.set(__self__, "facility_code", facility_code)
        if port_ids is not None:
            pulumi.set(__self__, "port_ids", port_ids)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="facilityCode")
    def facility_code(self) -> Optional[pulumi.Input[str]]:
        """
        Location where to create this VLAN
        """
        return pulumi.get(self, "facility_code")

    @facility_code.setter
    def facility_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility_code", value)

    @property
    @pulumi.getter(name="portIds")
    def port_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        IDs of ports to include in this VLAN
        """
        return pulumi.get(self, "port_ids")

    @port_ids.setter
    def port_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "port_ids", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[int]]:
        """
        Tag ID of VLAN
        """
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of VLAN to be created, can be either `private` or `public`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class VlanDetail(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 facility_code: Optional[pulumi.Input[str]] = None,
                 port_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VlanDetail resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] facility_code: Location where to create this VLAN
        :param pulumi.Input[Sequence[pulumi.Input[int]]] port_ids: IDs of ports to include in this VLAN
        :param pulumi.Input[str] type: Type of VLAN to be created, can be either `private` or `public`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VlanDetailArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VlanDetail resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VlanDetailArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VlanDetailArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 facility_code: Optional[pulumi.Input[str]] = None,
                 port_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VlanDetailArgs.__new__(VlanDetailArgs)

            if facility_code is None and not opts.urn:
                raise TypeError("Missing required property 'facility_code'")
            __props__.__dict__["facility_code"] = facility_code
            if port_ids is None and not opts.urn:
                raise TypeError("Missing required property 'port_ids'")
            __props__.__dict__["port_ids"] = port_ids
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["tag_id"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="hivelocity:index/vlan:vlan")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(VlanDetail, __self__).__init__(
            'hivelocity:index/vlanDetail:VlanDetail',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            facility_code: Optional[pulumi.Input[str]] = None,
            port_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            tag_id: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'VlanDetail':
        """
        Get an existing VlanDetail resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] facility_code: Location where to create this VLAN
        :param pulumi.Input[Sequence[pulumi.Input[int]]] port_ids: IDs of ports to include in this VLAN
        :param pulumi.Input[int] tag_id: Tag ID of VLAN
        :param pulumi.Input[str] type: Type of VLAN to be created, can be either `private` or `public`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VlanDetailState.__new__(_VlanDetailState)

        __props__.__dict__["facility_code"] = facility_code
        __props__.__dict__["port_ids"] = port_ids
        __props__.__dict__["tag_id"] = tag_id
        __props__.__dict__["type"] = type
        return VlanDetail(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="facilityCode")
    def facility_code(self) -> pulumi.Output[str]:
        """
        Location where to create this VLAN
        """
        return pulumi.get(self, "facility_code")

    @property
    @pulumi.getter(name="portIds")
    def port_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        IDs of ports to include in this VLAN
        """
        return pulumi.get(self, "port_ids")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> pulumi.Output[int]:
        """
        Tag ID of VLAN
        """
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of VLAN to be created, can be either `private` or `public`
        """
        return pulumi.get(self, "type")

